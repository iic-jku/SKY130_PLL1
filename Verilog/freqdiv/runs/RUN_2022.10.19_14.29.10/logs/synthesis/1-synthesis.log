
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.12+45 (git sha1 cfe940a98, gcc 9.2.1 -fPIC -Os)

[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

1. Executing Verilog-2005 frontend: /foss/designs/ma2022/freqdiv/src/freqdiv.v
Parsing SystemVerilog input from `/foss/designs/ma2022/freqdiv/src/freqdiv.v' to AST representation.
Generating RTLIL representation for module `\clock_divider'.
Successfully finished Verilog frontend.

2. Generating Graphviz representation of design.
Writing dot description to `/foss/designs/ma2022/freqdiv/runs/RUN_2022.10.19_14.29.10/tmp/synthesis/hierarchy.dot'.
Dumping module clock_divider to page 1.

3. Executing HIERARCHY pass (managing design hierarchy).

3.1. Analyzing design hierarchy..
Top module:  \clock_divider

3.2. Analyzing design hierarchy..
Top module:  \clock_divider
Removed 0 unused modules.

4. Executing TRIBUF pass.

5. Executing SYNTH pass.

5.1. Executing HIERARCHY pass (managing design hierarchy).

5.1.1. Analyzing design hierarchy..
Top module:  \clock_divider

5.1.2. Analyzing design hierarchy..
Top module:  \clock_divider
Removed 0 unused modules.

5.2. Executing PROC pass (convert processes to netlists).

5.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

5.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

5.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 2 assignments to connections.

5.2.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\clock_divider.$proc$/foss/designs/ma2022/freqdiv/src/freqdiv.v:7$6'.
  Set init value: \counter = 28'0000000000000000000000000000

5.2.5. Executing PROC_ARST pass (detect async resets in processes).

5.2.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\clock_divider.$proc$/foss/designs/ma2022/freqdiv/src/freqdiv.v:7$6'.
Creating decoders for process `\clock_divider.$proc$/foss/designs/ma2022/freqdiv/src/freqdiv.v:9$1'.
     1/1: $0\counter[27:0]

5.2.7. Executing PROC_DLATCH pass (convert process syncs to latches).

5.2.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\clock_divider.\clock_out' using process `\clock_divider.$proc$/foss/designs/ma2022/freqdiv/src/freqdiv.v:9$1'.
  created $dff cell `$procdff$9' with positive edge clock.
Creating register for signal `\clock_divider.\counter' using process `\clock_divider.$proc$/foss/designs/ma2022/freqdiv/src/freqdiv.v:9$1'.
  created $dff cell `$procdff$10' with positive edge clock.

5.2.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

5.2.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `clock_divider.$proc$/foss/designs/ma2022/freqdiv/src/freqdiv.v:7$6'.
Found and cleaned up 1 empty switch in `\clock_divider.$proc$/foss/designs/ma2022/freqdiv/src/freqdiv.v:9$1'.
Removing empty process `clock_divider.$proc$/foss/designs/ma2022/freqdiv/src/freqdiv.v:9$1'.
Cleaned up 1 empty switch.

5.2.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module clock_divider.

5.3. Executing FLATTEN pass (flatten design).

5.4. Executing OPT_EXPR pass (perform const folding).
Optimizing module clock_divider.

5.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \clock_divider..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

5.6. Executing CHECK pass (checking for obvious problems).
Checking module clock_divider...
Found and reported 0 problems.

5.7. Executing OPT pass (performing simple optimizations).

5.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module clock_divider.

5.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\clock_divider'.
Removed a total of 0 cells.

5.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \clock_divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

5.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \clock_divider.
Performed a total of 0 changes.

5.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\clock_divider'.
Removed a total of 0 cells.

5.7.6. Executing OPT_DFF pass (perform DFF optimizations).

5.7.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \clock_divider..

5.7.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module clock_divider.

5.7.9. Finished OPT passes. (There is nothing left to do.)

5.8. Executing FSM pass (extract and optimize FSM).

5.8.1. Executing FSM_DETECT pass (finding FSMs in design).

5.8.2. Executing FSM_EXTRACT pass (extracting FSM from design).

5.8.3. Executing FSM_OPT pass (simple optimizations of FSMs).

5.8.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \clock_divider..

5.8.5. Executing FSM_OPT pass (simple optimizations of FSMs).

5.8.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

5.8.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

5.8.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

5.9. Executing OPT pass (performing simple optimizations).

5.9.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module clock_divider.

5.9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\clock_divider'.
Removed a total of 0 cells.

5.9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \clock_divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

5.9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \clock_divider.
Performed a total of 0 changes.

5.9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\clock_divider'.
Removed a total of 0 cells.

5.9.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $procdff$10 ($dff) from module clock_divider (D = $add$/foss/designs/ma2022/freqdiv/src/freqdiv.v:11$2_Y, Q = \counter, rval = 28'0000000000000000000000000000).

5.9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \clock_divider..
Removed 1 unused cells and 1 unused wires.
<suppressed ~2 debug messages>

5.9.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module clock_divider.

5.9.9. Rerunning OPT passes. (Maybe there is more to do..)

5.9.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \clock_divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

5.9.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \clock_divider.
Performed a total of 0 changes.

5.9.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\clock_divider'.
Removed a total of 0 cells.

5.9.13. Executing OPT_DFF pass (perform DFF optimizations).

5.9.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \clock_divider..

5.9.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module clock_divider.

5.9.16. Finished OPT passes. (There is nothing left to do.)

5.10. Executing WREDUCE pass (reducing word size of cells).
Removed top 27 bits (of 28) from port B of cell clock_divider.$add$/foss/designs/ma2022/freqdiv/src/freqdiv.v:11$2 ($add).
Removed top 28 bits (of 32) from port B of cell clock_divider.$ge$/foss/designs/ma2022/freqdiv/src/freqdiv.v:12$3 ($ge).
Removed top 29 bits (of 32) from port B of cell clock_divider.$lt$/foss/designs/ma2022/freqdiv/src/freqdiv.v:14$4 ($lt).

5.11. Executing PEEPOPT pass (run peephole optimizers).

5.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \clock_divider..

5.13. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module clock_divider:
  creating $macc model for $add$/foss/designs/ma2022/freqdiv/src/freqdiv.v:11$2 ($add).
  creating $alu model for $macc $add$/foss/designs/ma2022/freqdiv/src/freqdiv.v:11$2.
  creating $alu model for $ge$/foss/designs/ma2022/freqdiv/src/freqdiv.v:12$3 ($ge): new $alu
  creating $alu model for $lt$/foss/designs/ma2022/freqdiv/src/freqdiv.v:14$4 ($lt): new $alu
  creating $alu cell for $lt$/foss/designs/ma2022/freqdiv/src/freqdiv.v:14$4: $auto$alumacc.cc:485:replace_alu$14
  creating $alu cell for $ge$/foss/designs/ma2022/freqdiv/src/freqdiv.v:12$3: $auto$alumacc.cc:485:replace_alu$25
  creating $alu cell for $add$/foss/designs/ma2022/freqdiv/src/freqdiv.v:11$2: $auto$alumacc.cc:485:replace_alu$34
  created 3 $alu and 0 $macc cells.

5.14. Executing SHARE pass (SAT-based resource sharing).

5.15. Executing OPT pass (performing simple optimizations).

5.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module clock_divider.
<suppressed ~1 debug messages>

5.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\clock_divider'.
Removed a total of 0 cells.

5.15.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \clock_divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

5.15.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \clock_divider.
Performed a total of 0 changes.

5.15.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\clock_divider'.
Removed a total of 0 cells.

5.15.6. Executing OPT_DFF pass (perform DFF optimizations).

5.15.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \clock_divider..
Removed 1 unused cells and 3 unused wires.
<suppressed ~2 debug messages>

5.15.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module clock_divider.

5.15.9. Rerunning OPT passes. (Maybe there is more to do..)

5.15.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \clock_divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

5.15.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \clock_divider.
Performed a total of 0 changes.

5.15.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\clock_divider'.
Removed a total of 0 cells.

5.15.13. Executing OPT_DFF pass (perform DFF optimizations).

5.15.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \clock_divider..

5.15.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module clock_divider.

5.15.16. Finished OPT passes. (There is nothing left to do.)

5.16. Executing MEMORY pass.

5.16.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

5.16.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

5.16.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

5.16.4. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

5.16.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \clock_divider..

5.16.6. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

5.16.7. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

5.16.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \clock_divider..

5.16.9. Executing MEMORY_COLLECT pass (generating $mem cells).

5.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \clock_divider..

5.18. Executing OPT pass (performing simple optimizations).

5.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module clock_divider.
<suppressed ~2 debug messages>

5.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\clock_divider'.
Removed a total of 0 cells.

5.18.3. Executing OPT_DFF pass (perform DFF optimizations).

5.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \clock_divider..
Removed 3 unused cells and 3 unused wires.
<suppressed ~4 debug messages>

5.18.5. Finished fast OPT passes.

5.19. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

5.20. Executing OPT pass (performing simple optimizations).

5.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module clock_divider.

5.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\clock_divider'.
Removed a total of 0 cells.

5.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \clock_divider..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

5.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \clock_divider.
Performed a total of 0 changes.

5.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\clock_divider'.
Removed a total of 0 cells.

5.20.6. Executing OPT_SHARE pass.

5.20.7. Executing OPT_DFF pass (perform DFF optimizations).

5.20.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \clock_divider..

5.20.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module clock_divider.

5.20.10. Finished OPT passes. (There is nothing left to do.)

5.21. Executing TECHMAP pass (map to technology primitives).

5.21.1. Executing Verilog-2005 frontend: /foss/tools/yosys/cfe940a/bin/../share/yosys/techmap.v
Parsing Verilog input from `/foss/tools/yosys/cfe940a/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

5.21.2. Continuing TECHMAP pass.
Using template $paramod$200b9977acfd333433396bc8e744688584077592\_90_alu for cells of type $alu.
Using template $paramod$e00791317a99366934555fafe3a65fcd4e53acd8\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $sdff.
Using extmapper simplemap for cells of type $dff.
Using template $paramod$b7e1f79258b87e4a83a116a743fd12e845b7ee99\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011100 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $mux.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011001 for cells of type $lcu.
No more expansions possible.
<suppressed ~757 debug messages>

5.22. Executing OPT pass (performing simple optimizations).

5.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module clock_divider.
<suppressed ~453 debug messages>

5.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\clock_divider'.
<suppressed ~297 debug messages>
Removed a total of 99 cells.

5.22.3. Executing OPT_DFF pass (perform DFF optimizations).

5.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \clock_divider..
Removed 94 unused cells and 309 unused wires.
<suppressed ~95 debug messages>

5.22.5. Finished fast OPT passes.

5.23. Executing ABC pass (technology mapping using ABC).

5.23.1. Extracting gate netlist of module `\clock_divider' to `<abc-temp-dir>/input.blif'..
Extracted 169 gates and 197 wires to a netlist network with 28 inputs and 30 outputs.

5.23.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

5.23.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        3
ABC RESULTS:            ANDNOT cells:       19
ABC RESULTS:              NAND cells:       13
ABC RESULTS:               NOR cells:        2
ABC RESULTS:               NOT cells:        1
ABC RESULTS:                OR cells:       72
ABC RESULTS:             ORNOT cells:        2
ABC RESULTS:              XNOR cells:       13
ABC RESULTS:               XOR cells:       14
ABC RESULTS:        internal signals:      139
ABC RESULTS:           input signals:       28
ABC RESULTS:          output signals:       30
Removing temp directory.

5.24. Executing OPT pass (performing simple optimizations).

5.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module clock_divider.

5.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\clock_divider'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

5.24.3. Executing OPT_DFF pass (perform DFF optimizations).

5.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \clock_divider..
Removed 0 unused cells and 115 unused wires.
<suppressed ~1 debug messages>

5.24.5. Finished fast OPT passes.

5.25. Executing HIERARCHY pass (managing design hierarchy).

5.25.1. Analyzing design hierarchy..
Top module:  \clock_divider

5.25.2. Analyzing design hierarchy..
Top module:  \clock_divider
Removed 0 unused modules.

5.26. Printing statistics.

=== clock_divider ===

   Number of wires:                115
   Number of wire bits:            196
   Number of public wires:           3
   Number of public wire bits:      30
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                167
     $_ANDNOT_                      19
     $_AND_                          2
     $_DFF_P_                        1
     $_NAND_                        13
     $_NOR_                          2
     $_NOT_                          1
     $_ORNOT_                        2
     $_OR_                          72
     $_SDFF_PP0_                    28
     $_XNOR_                        13
     $_XOR_                         14

5.27. Executing CHECK pass (checking for obvious problems).
Checking module clock_divider...
Found and reported 0 problems.

6. Generating Graphviz representation of design.
Writing dot description to `/foss/designs/ma2022/freqdiv/runs/RUN_2022.10.19_14.29.10/tmp/synthesis/post_techmap.dot'.
Dumping module clock_divider to page 1.

7. Executing SHARE pass (SAT-based resource sharing).

8. Executing OPT pass (performing simple optimizations).

8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module clock_divider.

8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\clock_divider'.
Removed a total of 0 cells.

8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \clock_divider..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \clock_divider.
Performed a total of 0 changes.

8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\clock_divider'.
Removed a total of 0 cells.

8.6. Executing OPT_DFF pass (perform DFF optimizations).

8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \clock_divider..

8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module clock_divider.

8.9. Finished OPT passes. (There is nothing left to do.)

9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \clock_divider..

10. Printing statistics.

=== clock_divider ===

   Number of wires:                115
   Number of wire bits:            196
   Number of public wires:           3
   Number of public wire bits:      30
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                167
     $_ANDNOT_                      19
     $_AND_                          2
     $_DFF_P_                        1
     $_NAND_                        13
     $_NOR_                          2
     $_NOT_                          1
     $_ORNOT_                        2
     $_OR_                          72
     $_SDFF_PP0_                    28
     $_XNOR_                        13
     $_XOR_                         14

mapping tbuf

11. Executing TECHMAP pass (map to technology primitives).

11.1. Executing Verilog-2005 frontend: /foss/pdk/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v
Parsing Verilog input from `/foss/pdk/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v' to AST representation.
Generating RTLIL representation for module `\$_TBUF_'.
Successfully finished Verilog frontend.

11.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

12. Executing SIMPLEMAP pass (map simple cells to gate primitives).

13. Executing TECHMAP pass (map to technology primitives).

13.1. Executing Verilog-2005 frontend: /foss/pdk/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/foss/pdk/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

13.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

14. Executing SIMPLEMAP pass (map simple cells to gate primitives).

15. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

15.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\clock_divider':
  mapped 29 $_DFF_P_ cells to \sky130_fd_sc_hd__dfxtp_2 cells.

16. Printing statistics.

=== clock_divider ===

   Number of wires:                143
   Number of wire bits:            224
   Number of public wires:           3
   Number of public wire bits:      30
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                195
     $_ANDNOT_                      19
     $_AND_                          2
     $_MUX_                         28
     $_NAND_                        13
     $_NOR_                          2
     $_NOT_                          1
     $_ORNOT_                        2
     $_OR_                          72
     $_XNOR_                        13
     $_XOR_                         14
     sky130_fd_sc_hd__dfxtp_2       29

[INFO]: USING STRATEGY AREA 0

17. Executing ABC pass (technology mapping using ABC).

17.1. Extracting gate netlist of module `\clock_divider' to `/tmp/yosys-abc-uKc8iz/input.blif'..
Extracted 166 gates and 195 wires to a netlist network with 28 inputs and 29 outputs.

17.1.1. Executing ABC.
Running ABC command: /foss/tools/yosys/cfe940a/bin/yosys-abc -s -f /tmp/yosys-abc-uKc8iz/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-uKc8iz/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-uKc8iz/input.blif 
ABC: + read_lib -w /foss/designs/ma2022/freqdiv/runs/RUN_2022.10.19_14.29.10/tmp/synthesis/trimmed.lib 
ABC: Parsing finished successfully.  Parsing time =     0.10 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Library "sky130A_merged" from "/foss/designs/ma2022/freqdiv/runs/RUN_2022.10.19_14.29.10/tmp/synthesis/trimmed.lib" has 175 cells (17 skipped: 14 seq; 3 tri-state; 0 no func; 0 dont_use).  Time =     0.17 sec
ABC: Memory =    7.77 MB. Time =     0.17 sec
ABC: Warning: Detected 2 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /foss/designs/ma2022/freqdiv/runs/RUN_2022.10.19_14.29.10/tmp/synthesis/synthesis.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_2".
ABC: Setting output load to be 33.442001.
ABC: + read_constr /foss/designs/ma2022/freqdiv/runs/RUN_2022.10.19_14.29.10/tmp/synthesis/synthesis.sdc 
ABC: + fx 
ABC: + mfs 
ABC: + strash 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + retime -D -D 500.0 -M 5 
ABC: + scleanup 
ABC: Error: The network is combinational.
ABC: + fraig_store 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + fraig_restore 
ABC: + amap -m -Q 0.1 -F 20 -A 20 -C 5000 
ABC: + retime -D -D 500.0 
ABC: + &get -n 
ABC: + &st 
ABC: + &dch 
ABC: + &nf 
ABC: + &put 
ABC: + buffer -N 5 -S 50.0 
ABC: + upsize -D 500.0 
ABC: + dnsize -D 500.0 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =     43 (  0.0 %)   Cap =  7.9 ff ( 29.8 %)   Area =      207.70 ( 16.3 %)   Delay =  1676.59 ps  ( 32.6 %)               
ABC: Path  0 --      21 : 0    1 pi                      A =   0.00  Df =   9.2   -5.7 ps  S =  19.1 ps  Cin =  0.0 ff  Cout =   2.5 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --      62 : 4    1 sky130_fd_sc_hd__or4_4  A =  11.26  Df = 504.3 -397.7 ps  S =  77.9 ps  Cin =  2.4 ff  Cout =   2.5 ff  Cmax = 534.7 ff  G =  100  
ABC: Path  2 --      65 : 3    2 sky130_fd_sc_hd__or3_4  A =  11.26  Df = 894.0 -683.5 ps  S =  65.7 ps  Cin =  2.4 ff  Cout =   5.1 ff  Cmax = 531.9 ff  G =  203  
ABC: Path  3 --      70 : 3    4 sky130_fd_sc_hd__or3_4  A =  11.26  Df =1309.7 -930.5 ps  S =  97.7 ps  Cin =  2.4 ff  Cout =  26.0 ff  Cmax = 531.9 ff  G = 1044  
ABC: Path  4 --      75 : 3    1 sky130_fd_sc_hd__nor3_4 A =  16.27  Df =1676.6-1218.1 ps  S = 387.2 ps  Cin =  8.7 ff  Cout =  33.4 ff  Cmax = 153.8 ff  G =  384  
ABC: Start-point = pi20 (\counter [7]).  End-point = po3 ($auto$rtlil.cc:2515:MuxGate$1414).
ABC: + print_stats -m 
ABC: netlist                       : i/o =   28/   29  lat =    0  nd =    43  edge =     60  area =207.72  delay = 4.00  lev = 4
ABC: + write_blif /tmp/yosys-abc-uKc8iz/output.blif 

17.1.2. Re-integrating ABC results.
ABC RESULTS:          _const0_ cells:       24
ABC RESULTS:   sky130_fd_sc_hd__a21oi_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a31o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__and3_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nor2_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nor2_4 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__nor3_4 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o21ba_4 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or2_4 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or3_4 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__or4_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__or4_4 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__xnor2_2 cells:        1
ABC RESULTS:        internal signals:      138
ABC RESULTS:           input signals:       28
ABC RESULTS:          output signals:       29
Removing temp directory.

18. Executing SETUNDEF pass (replace undef values with defined constants).

19. Executing HILOMAP pass (mapping to constant drivers).

20. Executing SPLITNETS pass (splitting up multi-bit signals).

21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \clock_divider..
Removed 0 unused cells and 246 unused wires.
<suppressed ~1 debug messages>

22. Executing INSBUF pass (insert buffer cells for connected wires).

23. Executing CHECK pass (checking for obvious problems).
Checking module clock_divider...
Warning: Wire clock_divider.\clock_out is used but has no driver.
Found and reported 1 problems.

24. Printing statistics.

=== clock_divider ===

   Number of wires:                 73
   Number of wire bits:             73
   Number of public wires:          30
   Number of public wire bits:      30
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 72
     sky130_fd_sc_hd__a21oi_2        1
     sky130_fd_sc_hd__a31o_2         1
     sky130_fd_sc_hd__and3_2         1
     sky130_fd_sc_hd__conb_1        24
     sky130_fd_sc_hd__dfxtp_2       29
     sky130_fd_sc_hd__nor2_2         1
     sky130_fd_sc_hd__nor2_4         2
     sky130_fd_sc_hd__nor3_4         1
     sky130_fd_sc_hd__o21ba_4        1
     sky130_fd_sc_hd__or2_4          1
     sky130_fd_sc_hd__or3_4          2
     sky130_fd_sc_hd__or4_2          2
     sky130_fd_sc_hd__or4_4          5
     sky130_fd_sc_hd__xnor2_2        1

   Chip area for module '\clock_divider': 914.627200

25. Executing Verilog backend.
Dumping module `\clock_divider'.

Warnings: 1 unique messages, 1 total
End of script. Logfile hash: 123ad7f111, CPU: user 1.79s system 0.03s, MEM: 40.72 MB peak
Yosys 0.12+45 (git sha1 cfe940a98, gcc 9.2.1 -fPIC -Os)
Time spent: 32% 4x stat (0 sec), 24% 2x abc (0 sec), ...
