
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.12+45 (git sha1 cfe940a98, gcc 9.2.1 -fPIC -Os)

[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

1. Executing Verilog-2005 frontend: /foss/designs/ma2022/fll_2/src/fll_wrapper_2.v
Parsing SystemVerilog input from `/foss/designs/ma2022/fll_2/src/fll_wrapper_2.v' to AST representation.
Generating RTLIL representation for module `\fll_wrapper_2'.
Successfully finished Verilog frontend.

2. Executing Verilog-2005 frontend: /foss/designs/ma2022/fll_2/src/bufferreg.v
Parsing SystemVerilog input from `/foss/designs/ma2022/fll_2/src/bufferreg.v' to AST representation.
Generating RTLIL representation for module `\bufferreg'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: /foss/designs/ma2022/fll_2/src/fll_2.v
Parsing SystemVerilog input from `/foss/designs/ma2022/fll_2/src/fll_2.v' to AST representation.
Generating RTLIL representation for module `\fll_2'.
Successfully finished Verilog frontend.

4. Executing Verilog-2005 frontend: /foss/designs/ma2022/fll_2/src/fll_counter.v
Parsing SystemVerilog input from `/foss/designs/ma2022/fll_2/src/fll_counter.v' to AST representation.
Generating RTLIL representation for module `\fll_counter'.
Successfully finished Verilog frontend.

5. Executing Verilog-2005 frontend: /foss/designs/ma2022/fll_2/src/pwm_dac.v
Parsing SystemVerilog input from `/foss/designs/ma2022/fll_2/src/pwm_dac.v' to AST representation.
Generating RTLIL representation for module `\pwm_dac'.
Successfully finished Verilog frontend.

6. Generating Graphviz representation of design.
Writing dot description to `/foss/designs/ma2022/fll_2/runs/RUN_2022.10.07_08.59.13/tmp/synthesis/hierarchy.dot'.
Dumping module fll_wrapper_2 to page 1.

7. Executing HIERARCHY pass (managing design hierarchy).

7.1. Analyzing design hierarchy..
Top module:  \fll_wrapper_2
Used module:     \pwm_dac
Used module:     \bufferreg
Used module:     \fll_2
Used module:         \fll_counter
Parameter \N = 10

7.2. Executing AST frontend in derive mode using pre-parsed AST for module `\pwm_dac'.
Parameter \N = 10
Generating RTLIL representation for module `$paramod\pwm_dac\N=s32'00000000000000000000000000001010'.
Parameter \N = 10

7.3. Executing AST frontend in derive mode using pre-parsed AST for module `\bufferreg'.
Parameter \N = 10
Generating RTLIL representation for module `$paramod\bufferreg\N=s32'00000000000000000000000000001010'.
Parameter \N = 10

7.4. Executing AST frontend in derive mode using pre-parsed AST for module `\fll_2'.
Parameter \N = 10
Generating RTLIL representation for module `$paramod\fll_2\N=s32'00000000000000000000000000001010'.
Parameter \N = 32

7.5. Executing AST frontend in derive mode using pre-parsed AST for module `\fll_counter'.
Parameter \N = 32
Generating RTLIL representation for module `$paramod\fll_counter\N=s32'00000000000000000000000000100000'.
Parameter \N = 32
Found cached RTLIL representation for module `$paramod\fll_counter\N=s32'00000000000000000000000000100000'.

7.6. Analyzing design hierarchy..
Top module:  \fll_wrapper_2
Used module:     $paramod\pwm_dac\N=s32'00000000000000000000000000001010
Used module:     $paramod\bufferreg\N=s32'00000000000000000000000000001010
Used module:     $paramod\fll_2\N=s32'00000000000000000000000000001010
Used module:         \fll_counter
Parameter \N = 10

7.7. Executing AST frontend in derive mode using pre-parsed AST for module `\fll_counter'.
Parameter \N = 10
Generating RTLIL representation for module `$paramod\fll_counter\N=s32'00000000000000000000000000001010'.
Parameter \N = 10
Found cached RTLIL representation for module `$paramod\fll_counter\N=s32'00000000000000000000000000001010'.

7.8. Analyzing design hierarchy..
Top module:  \fll_wrapper_2
Used module:     $paramod\pwm_dac\N=s32'00000000000000000000000000001010
Used module:     $paramod\bufferreg\N=s32'00000000000000000000000000001010
Used module:     $paramod\fll_2\N=s32'00000000000000000000000000001010
Used module:         $paramod\fll_counter\N=s32'00000000000000000000000000001010

7.9. Analyzing design hierarchy..
Top module:  \fll_wrapper_2
Used module:     $paramod\pwm_dac\N=s32'00000000000000000000000000001010
Used module:     $paramod\bufferreg\N=s32'00000000000000000000000000001010
Used module:     $paramod\fll_2\N=s32'00000000000000000000000000001010
Used module:         $paramod\fll_counter\N=s32'00000000000000000000000000001010
Removing unused module `$paramod\fll_counter\N=s32'00000000000000000000000000100000'.
Removing unused module `\pwm_dac'.
Removing unused module `\fll_counter'.
Removing unused module `\fll_2'.
Removing unused module `\bufferreg'.
Removed 5 unused modules.

8. Executing TRIBUF pass.

9. Executing SYNTH pass.

9.1. Executing HIERARCHY pass (managing design hierarchy).

9.1.1. Analyzing design hierarchy..
Top module:  \fll_wrapper_2
Used module:     $paramod\pwm_dac\N=s32'00000000000000000000000000001010
Used module:     $paramod\bufferreg\N=s32'00000000000000000000000000001010
Used module:     $paramod\fll_2\N=s32'00000000000000000000000000001010
Used module:         $paramod\fll_counter\N=s32'00000000000000000000000000001010

9.1.2. Analyzing design hierarchy..
Top module:  \fll_wrapper_2
Used module:     $paramod\pwm_dac\N=s32'00000000000000000000000000001010
Used module:     $paramod\bufferreg\N=s32'00000000000000000000000000001010
Used module:     $paramod\fll_2\N=s32'00000000000000000000000000001010
Used module:         $paramod\fll_counter\N=s32'00000000000000000000000000001010
Removed 0 unused modules.

9.2. Executing PROC pass (convert processes to netlists).

9.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

9.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/foss/designs/ma2022/fll_2/src/fll_counter.v:11$51 in module $paramod\fll_counter\N=s32'00000000000000000000000000001010.
Marked 6 switch rules as full_case in process $proc$/foss/designs/ma2022/fll_2/src/fll_2.v:26$32 in module $paramod\fll_2\N=s32'00000000000000000000000000001010.
Marked 1 switch rules as full_case in process $proc$/foss/designs/ma2022/fll_2/src/bufferreg.v:11$30 in module $paramod\bufferreg\N=s32'00000000000000000000000000001010.
Marked 1 switch rules as full_case in process $proc$/foss/designs/ma2022/fll_2/src/pwm_dac.v:10$26 in module $paramod\pwm_dac\N=s32'00000000000000000000000000001010.
Removed a total of 0 dead cases.

9.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 5 redundant assignments.
Promoted 7 assignments to connections.

9.2.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `$paramod\fll_counter\N=s32'00000000000000000000000000001010.$proc$/foss/designs/ma2022/fll_2/src/fll_counter.v:9$53'.
  Set init value: \count = 10'0000000000
Found init rule in `$paramod\fll_2\N=s32'00000000000000000000000000001010.$proc$/foss/designs/ma2022/fll_2/src/fll_2.v:20$47'.
  Set init value: \corner_tmp = 3'010
Found init rule in `$paramod\fll_2\N=s32'00000000000000000000000000001010.$proc$/foss/designs/ma2022/fll_2/src/fll_2.v:19$46'.
  Set init value: \tmp = 10'0000000000
Found init rule in `$paramod\fll_2\N=s32'00000000000000000000000000001010.$proc$/foss/designs/ma2022/fll_2/src/fll_2.v:16$45'.
  Set init value: \counter_reset = 1'1
Found init rule in `$paramod\bufferreg\N=s32'00000000000000000000000000001010.$proc$/foss/designs/ma2022/fll_2/src/bufferreg.v:9$31'.
  Set init value: \tmp = 10'0000000000
Found init rule in `$paramod\pwm_dac\N=s32'00000000000000000000000000001010.$proc$/foss/designs/ma2022/fll_2/src/pwm_dac.v:9$29'.
  Set init value: \count = 10'0000000000

9.2.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \reset in `$paramod\fll_counter\N=s32'00000000000000000000000000001010.$proc$/foss/designs/ma2022/fll_2/src/fll_counter.v:11$51'.
Found async reset \reset in `$paramod\fll_2\N=s32'00000000000000000000000000001010.$proc$/foss/designs/ma2022/fll_2/src/fll_2.v:26$32'.
Found async reset \reset in `$paramod\bufferreg\N=s32'00000000000000000000000000001010.$proc$/foss/designs/ma2022/fll_2/src/bufferreg.v:11$30'.
Found async reset \reset in `$paramod\pwm_dac\N=s32'00000000000000000000000000001010.$proc$/foss/designs/ma2022/fll_2/src/pwm_dac.v:10$26'.

9.2.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `$paramod\fll_counter\N=s32'00000000000000000000000000001010.$proc$/foss/designs/ma2022/fll_2/src/fll_counter.v:9$53'.
Creating decoders for process `$paramod\fll_counter\N=s32'00000000000000000000000000001010.$proc$/foss/designs/ma2022/fll_2/src/fll_counter.v:11$51'.
     1/1: $0\count[9:0]
Creating decoders for process `$paramod\fll_2\N=s32'00000000000000000000000000001010.$proc$/foss/designs/ma2022/fll_2/src/fll_2.v:20$47'.
Creating decoders for process `$paramod\fll_2\N=s32'00000000000000000000000000001010.$proc$/foss/designs/ma2022/fll_2/src/fll_2.v:19$46'.
Creating decoders for process `$paramod\fll_2\N=s32'00000000000000000000000000001010.$proc$/foss/designs/ma2022/fll_2/src/fll_2.v:16$45'.
Creating decoders for process `$paramod\fll_2\N=s32'00000000000000000000000000001010.$proc$/foss/designs/ma2022/fll_2/src/fll_2.v:26$32'.
     1/10: $6\corner_tmp[2:0]
     2/10: $5\corner_tmp[2:0]
     3/10: $4\corner_tmp[2:0]
     4/10: $3\corner_tmp[2:0]
     5/10: $2\corner_tmp[2:0]
     6/10: $1\corner_tmp[2:0]
     7/10: $0\strobe[0:0]
     8/10: $0\counter_reset[0:0]
     9/10: $0\tmp[9:0]
    10/10: $0\locked[0:0]
Creating decoders for process `$paramod\bufferreg\N=s32'00000000000000000000000000001010.$proc$/foss/designs/ma2022/fll_2/src/bufferreg.v:9$31'.
Creating decoders for process `$paramod\bufferreg\N=s32'00000000000000000000000000001010.$proc$/foss/designs/ma2022/fll_2/src/bufferreg.v:11$30'.
     1/1: $0\tmp[9:0]
Creating decoders for process `$paramod\pwm_dac\N=s32'00000000000000000000000000001010.$proc$/foss/designs/ma2022/fll_2/src/pwm_dac.v:9$29'.
Creating decoders for process `$paramod\pwm_dac\N=s32'00000000000000000000000000001010.$proc$/foss/designs/ma2022/fll_2/src/pwm_dac.v:10$26'.
     1/1: $0\count[9:0]

9.2.7. Executing PROC_DLATCH pass (convert process syncs to latches).

9.2.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `$paramod\fll_counter\N=s32'00000000000000000000000000001010.\count' using process `$paramod\fll_counter\N=s32'00000000000000000000000000001010.$proc$/foss/designs/ma2022/fll_2/src/fll_counter.v:11$51'.
  created $adff cell `$procdff$125' with positive edge clock and positive level reset.
Creating register for signal `$paramod\fll_2\N=s32'00000000000000000000000000001010.\strobe' using process `$paramod\fll_2\N=s32'00000000000000000000000000001010.$proc$/foss/designs/ma2022/fll_2/src/fll_2.v:26$32'.
  created $adff cell `$procdff$126' with positive edge clock and positive level reset.
Creating register for signal `$paramod\fll_2\N=s32'00000000000000000000000000001010.\locked' using process `$paramod\fll_2\N=s32'00000000000000000000000000001010.$proc$/foss/designs/ma2022/fll_2/src/fll_2.v:26$32'.
  created $adff cell `$procdff$127' with positive edge clock and positive level reset.
Creating register for signal `$paramod\fll_2\N=s32'00000000000000000000000000001010.\tmp' using process `$paramod\fll_2\N=s32'00000000000000000000000000001010.$proc$/foss/designs/ma2022/fll_2/src/fll_2.v:26$32'.
  created $adff cell `$procdff$128' with positive edge clock and positive level reset.
Creating register for signal `$paramod\fll_2\N=s32'00000000000000000000000000001010.\counter_reset' using process `$paramod\fll_2\N=s32'00000000000000000000000000001010.$proc$/foss/designs/ma2022/fll_2/src/fll_2.v:26$32'.
  created $adff cell `$procdff$129' with positive edge clock and positive level reset.
Creating register for signal `$paramod\fll_2\N=s32'00000000000000000000000000001010.\corner_tmp' using process `$paramod\fll_2\N=s32'00000000000000000000000000001010.$proc$/foss/designs/ma2022/fll_2/src/fll_2.v:26$32'.
  created $dff cell `$procdff$132' with positive edge clock.
Creating register for signal `$paramod\bufferreg\N=s32'00000000000000000000000000001010.\tmp' using process `$paramod\bufferreg\N=s32'00000000000000000000000000001010.$proc$/foss/designs/ma2022/fll_2/src/bufferreg.v:11$30'.
  created $adff cell `$procdff$133' with positive edge clock and positive level reset.
Creating register for signal `$paramod\pwm_dac\N=s32'00000000000000000000000000001010.\count' using process `$paramod\pwm_dac\N=s32'00000000000000000000000000001010.$proc$/foss/designs/ma2022/fll_2/src/pwm_dac.v:10$26'.
  created $adff cell `$procdff$134' with positive edge clock and positive level reset.

9.2.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

9.2.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `$paramod\fll_counter\N=s32'00000000000000000000000000001010.$proc$/foss/designs/ma2022/fll_2/src/fll_counter.v:9$53'.
Removing empty process `$paramod\fll_counter\N=s32'00000000000000000000000000001010.$proc$/foss/designs/ma2022/fll_2/src/fll_counter.v:11$51'.
Removing empty process `$paramod\fll_2\N=s32'00000000000000000000000000001010.$proc$/foss/designs/ma2022/fll_2/src/fll_2.v:20$47'.
Removing empty process `$paramod\fll_2\N=s32'00000000000000000000000000001010.$proc$/foss/designs/ma2022/fll_2/src/fll_2.v:19$46'.
Removing empty process `$paramod\fll_2\N=s32'00000000000000000000000000001010.$proc$/foss/designs/ma2022/fll_2/src/fll_2.v:16$45'.
Found and cleaned up 6 empty switches in `$paramod\fll_2\N=s32'00000000000000000000000000001010.$proc$/foss/designs/ma2022/fll_2/src/fll_2.v:26$32'.
Removing empty process `$paramod\fll_2\N=s32'00000000000000000000000000001010.$proc$/foss/designs/ma2022/fll_2/src/fll_2.v:26$32'.
Removing empty process `$paramod\bufferreg\N=s32'00000000000000000000000000001010.$proc$/foss/designs/ma2022/fll_2/src/bufferreg.v:9$31'.
Removing empty process `$paramod\bufferreg\N=s32'00000000000000000000000000001010.$proc$/foss/designs/ma2022/fll_2/src/bufferreg.v:11$30'.
Removing empty process `$paramod\pwm_dac\N=s32'00000000000000000000000000001010.$proc$/foss/designs/ma2022/fll_2/src/pwm_dac.v:9$29'.
Removing empty process `$paramod\pwm_dac\N=s32'00000000000000000000000000001010.$proc$/foss/designs/ma2022/fll_2/src/pwm_dac.v:10$26'.
Cleaned up 6 empty switches.

9.2.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\fll_counter\N=s32'00000000000000000000000000001010.
Optimizing module $paramod\fll_2\N=s32'00000000000000000000000000001010.
Optimizing module $paramod\bufferreg\N=s32'00000000000000000000000000001010.
Optimizing module $paramod\pwm_dac\N=s32'00000000000000000000000000001010.
Optimizing module fll_wrapper_2.

9.3. Executing FLATTEN pass (flatten design).
Deleting now unused module $paramod\fll_counter\N=s32'00000000000000000000000000001010.
Deleting now unused module $paramod\fll_2\N=s32'00000000000000000000000000001010.
Deleting now unused module $paramod\bufferreg\N=s32'00000000000000000000000000001010.
Deleting now unused module $paramod\pwm_dac\N=s32'00000000000000000000000000001010.
<suppressed ~5 debug messages>

9.4. Executing OPT_EXPR pass (perform const folding).
Optimizing module fll_wrapper_2.

9.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fll_wrapper_2..
Removed 0 unused cells and 47 unused wires.
<suppressed ~1 debug messages>

9.6. Executing CHECK pass (checking for obvious problems).
Checking module fll_wrapper_2...
Found and reported 0 problems.

9.7. Executing OPT pass (performing simple optimizations).

9.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module fll_wrapper_2.

9.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fll_wrapper_2'.
Removed a total of 0 cells.

9.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fll_wrapper_2..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $flatten\fll_core.$procmux$59.
    dead port 1/2 on $mux $flatten\fll_core.$procmux$62.
    dead port 2/2 on $mux $flatten\fll_core.$procmux$64.
    dead port 1/2 on $mux $flatten\fll_core.$procmux$71.
    dead port 2/2 on $mux $flatten\fll_core.$procmux$73.
    dead port 2/2 on $mux $flatten\fll_core.$procmux$80.
    dead port 2/2 on $mux $flatten\fll_core.$procmux$82.
    dead port 2/2 on $mux $flatten\fll_core.$procmux$88.
Removed 8 multiplexer ports.
<suppressed ~5 debug messages>

9.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fll_wrapper_2.
Performed a total of 0 changes.

9.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fll_wrapper_2'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

9.7.6. Executing OPT_DFF pass (perform DFF optimizations).

9.7.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fll_wrapper_2..
Removed 0 unused cells and 9 unused wires.
<suppressed ~1 debug messages>

9.7.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module fll_wrapper_2.

9.7.9. Rerunning OPT passes. (Maybe there is more to do..)

9.7.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fll_wrapper_2..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

9.7.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fll_wrapper_2.
Performed a total of 0 changes.

9.7.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fll_wrapper_2'.
Removed a total of 0 cells.

9.7.13. Executing OPT_DFF pass (perform DFF optimizations).

9.7.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fll_wrapper_2..

9.7.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module fll_wrapper_2.

9.7.16. Finished OPT passes. (There is nothing left to do.)

9.8. Executing FSM pass (extract and optimize FSM).

9.8.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking fll_wrapper_2.fll_core.corner_tmp as FSM state register:
    Register is connected to module port.
    Users of register don't seem to benefit from recoding.
    Register has an initialization value.

9.8.2. Executing FSM_EXTRACT pass (extracting FSM from design).

9.8.3. Executing FSM_OPT pass (simple optimizations of FSMs).

9.8.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fll_wrapper_2..

9.8.5. Executing FSM_OPT pass (simple optimizations of FSMs).

9.8.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

9.8.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

9.8.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

9.9. Executing OPT pass (performing simple optimizations).

9.9.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module fll_wrapper_2.

9.9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fll_wrapper_2'.
Removed a total of 0 cells.

9.9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fll_wrapper_2..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

9.9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fll_wrapper_2.
Performed a total of 0 changes.

9.9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fll_wrapper_2'.
Removed a total of 0 cells.

9.9.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $flatten\fll_core.$procdff$132 ($dff) from module fll_wrapper_2 (D = $flatten\fll_core.$3\corner_tmp[2:0], Q = \fll_core.corner_tmp).
Adding EN signal on $flatten\fll_core.$procdff$128 ($adff) from module fll_wrapper_2 (D = $flatten\fll_core.$procmux$110_Y, Q = \fll_core.tmp).
Adding EN signal on $flatten\fll_core.$procdff$127 ($adff) from module fll_wrapper_2 (D = $flatten\fll_core.$procmux$121_Y, Q = \fll_core.locked).

9.9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fll_wrapper_2..
Removed 4 unused cells and 4 unused wires.
<suppressed ~5 debug messages>

9.9.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module fll_wrapper_2.
<suppressed ~3 debug messages>

9.9.9. Rerunning OPT passes. (Maybe there is more to do..)

9.9.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fll_wrapper_2..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

9.9.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fll_wrapper_2.
Performed a total of 0 changes.

9.9.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fll_wrapper_2'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

9.9.13. Executing OPT_DFF pass (perform DFF optimizations).

9.9.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fll_wrapper_2..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

9.9.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module fll_wrapper_2.

9.9.16. Rerunning OPT passes. (Maybe there is more to do..)

9.9.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fll_wrapper_2..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

9.9.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fll_wrapper_2.
Performed a total of 0 changes.

9.9.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fll_wrapper_2'.
Removed a total of 0 cells.

9.9.20. Executing OPT_DFF pass (perform DFF optimizations).

9.9.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fll_wrapper_2..

9.9.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module fll_wrapper_2.

9.9.23. Finished OPT passes. (There is nothing left to do.)

9.10. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 3) from port B of cell fll_wrapper_2.$auto$opt_dff.cc:198:make_patterns_logic$137 ($ne).
Removed cell fll_wrapper_2.$flatten\fll_core.$procmux$115 ($mux).
Removed cell fll_wrapper_2.$flatten\fll_core.$procmux$108 ($mux).
Removed cell fll_wrapper_2.$flatten\fll_core.$procmux$104 ($mux).
Removed cell fll_wrapper_2.$flatten\fll_core.$procmux$102 ($mux).
Removed top 1 bits (of 3) from port B of cell fll_wrapper_2.$auto$opt_dff.cc:198:make_patterns_logic$148 ($ne).
Removed cell fll_wrapper_2.$flatten\fll_core.$procmux$78 ($mux).
Removed cell fll_wrapper_2.$flatten\fll_core.$procmux$68 ($mux).
Removed cell fll_wrapper_2.$flatten\fll_core.$procmux$57 ($mux).
Removed top 22 bits (of 32) from port B of cell fll_wrapper_2.$flatten\fll_core.$le$/foss/designs/ma2022/fll_2/src/fll_2.v:48$40 ($le).
Removed top 21 bits (of 32) from port Y of cell fll_wrapper_2.$flatten\fll_core.$add$/foss/designs/ma2022/fll_2/src/fll_2.v:48$39 ($add).
Removed top 31 bits (of 32) from port B of cell fll_wrapper_2.$flatten\fll_core.$gt$/foss/designs/ma2022/fll_2/src/fll_2.v:42$36 ($gt).
Removed top 21 bits (of 32) from port Y of cell fll_wrapper_2.$flatten\fll_core.$sub$/foss/designs/ma2022/fll_2/src/fll_2.v:42$35 ($sub).
Removed top 21 bits (of 32) from wire fll_wrapper_2.$flatten\fll_core.$add$/foss/designs/ma2022/fll_2/src/fll_2.v:48$39_Y.

9.11. Executing PEEPOPT pass (run peephole optimizers).

9.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fll_wrapper_2..
Removed 0 unused cells and 8 unused wires.
<suppressed ~1 debug messages>

9.13. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module fll_wrapper_2:
  creating $macc model for $flatten\fll_core.$add$/foss/designs/ma2022/fll_2/src/fll_2.v:48$39 ($add).
  creating $macc model for $flatten\fll_core.$add$/foss/designs/ma2022/fll_2/src/fll_2.v:49$41 ($add).
  creating $macc model for $flatten\fll_core.$sub$/foss/designs/ma2022/fll_2/src/fll_2.v:42$35 ($sub).
  creating $macc model for $flatten\fll_core.$sub$/foss/designs/ma2022/fll_2/src/fll_2.v:43$37 ($sub).
  creating $macc model for $flatten\fll_core.\counter1.$add$/foss/designs/ma2022/fll_2/src/fll_counter.v:16$52 ($add).
  creating $macc model for $flatten\fll_core.\counter2.$add$/foss/designs/ma2022/fll_2/src/fll_counter.v:16$52 ($add).
  creating $macc model for $flatten\pwm_module.$add$/foss/designs/ma2022/fll_2/src/pwm_dac.v:14$27 ($add).
  creating $alu model for $macc $flatten\pwm_module.$add$/foss/designs/ma2022/fll_2/src/pwm_dac.v:14$27.
  creating $alu model for $macc $flatten\fll_core.\counter2.$add$/foss/designs/ma2022/fll_2/src/fll_counter.v:16$52.
  creating $alu model for $macc $flatten\fll_core.\counter1.$add$/foss/designs/ma2022/fll_2/src/fll_counter.v:16$52.
  creating $alu model for $macc $flatten\fll_core.$sub$/foss/designs/ma2022/fll_2/src/fll_2.v:43$37.
  creating $alu model for $macc $flatten\fll_core.$sub$/foss/designs/ma2022/fll_2/src/fll_2.v:42$35.
  creating $alu model for $macc $flatten\fll_core.$add$/foss/designs/ma2022/fll_2/src/fll_2.v:49$41.
  creating $alu model for $macc $flatten\fll_core.$add$/foss/designs/ma2022/fll_2/src/fll_2.v:48$39.
  creating $alu model for $flatten\fll_core.$ge$/foss/designs/ma2022/fll_2/src/fll_2.v:52$42 ($ge): new $alu
  creating $alu model for $flatten\fll_core.$gt$/foss/designs/ma2022/fll_2/src/fll_2.v:40$34 ($gt): new $alu
  creating $alu model for $flatten\fll_core.$gt$/foss/designs/ma2022/fll_2/src/fll_2.v:42$36 ($gt): new $alu
  creating $alu model for $flatten\fll_core.$le$/foss/designs/ma2022/fll_2/src/fll_2.v:48$40 ($le): new $alu
  creating $alu model for $flatten\fll_core.$le$/foss/designs/ma2022/fll_2/src/fll_2.v:52$43 ($le): merged with $flatten\fll_core.$gt$/foss/designs/ma2022/fll_2/src/fll_2.v:40$34.
  creating $alu model for $flatten\fll_core.$lt$/foss/designs/ma2022/fll_2/src/fll_2.v:46$38 ($lt): merged with $flatten\fll_core.$ge$/foss/designs/ma2022/fll_2/src/fll_2.v:52$42.
  creating $alu model for $flatten\pwm_module.$gt$/foss/designs/ma2022/fll_2/src/pwm_dac.v:16$28 ($gt): new $alu
  creating $alu cell for $flatten\pwm_module.$gt$/foss/designs/ma2022/fll_2/src/pwm_dac.v:16$28: $auto$alumacc.cc:485:replace_alu$166
  creating $alu cell for $flatten\fll_core.$le$/foss/designs/ma2022/fll_2/src/fll_2.v:48$40: $auto$alumacc.cc:485:replace_alu$171
  creating $alu cell for $flatten\fll_core.$gt$/foss/designs/ma2022/fll_2/src/fll_2.v:42$36: $auto$alumacc.cc:485:replace_alu$184
  creating $alu cell for $flatten\fll_core.$gt$/foss/designs/ma2022/fll_2/src/fll_2.v:40$34, $flatten\fll_core.$le$/foss/designs/ma2022/fll_2/src/fll_2.v:52$43: $auto$alumacc.cc:485:replace_alu$189
  creating $alu cell for $flatten\fll_core.$ge$/foss/designs/ma2022/fll_2/src/fll_2.v:52$42, $flatten\fll_core.$lt$/foss/designs/ma2022/fll_2/src/fll_2.v:46$38: $auto$alumacc.cc:485:replace_alu$202
  creating $alu cell for $flatten\fll_core.$add$/foss/designs/ma2022/fll_2/src/fll_2.v:48$39: $auto$alumacc.cc:485:replace_alu$215
  creating $alu cell for $flatten\fll_core.$add$/foss/designs/ma2022/fll_2/src/fll_2.v:49$41: $auto$alumacc.cc:485:replace_alu$218
  creating $alu cell for $flatten\fll_core.$sub$/foss/designs/ma2022/fll_2/src/fll_2.v:42$35: $auto$alumacc.cc:485:replace_alu$221
  creating $alu cell for $flatten\fll_core.$sub$/foss/designs/ma2022/fll_2/src/fll_2.v:43$37: $auto$alumacc.cc:485:replace_alu$224
  creating $alu cell for $flatten\fll_core.\counter1.$add$/foss/designs/ma2022/fll_2/src/fll_counter.v:16$52: $auto$alumacc.cc:485:replace_alu$227
  creating $alu cell for $flatten\fll_core.\counter2.$add$/foss/designs/ma2022/fll_2/src/fll_counter.v:16$52: $auto$alumacc.cc:485:replace_alu$230
  creating $alu cell for $flatten\pwm_module.$add$/foss/designs/ma2022/fll_2/src/pwm_dac.v:14$27: $auto$alumacc.cc:485:replace_alu$233
  created 12 $alu and 0 $macc cells.

9.14. Executing SHARE pass (SAT-based resource sharing).

9.15. Executing OPT pass (performing simple optimizations).

9.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module fll_wrapper_2.
<suppressed ~4 debug messages>

9.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fll_wrapper_2'.
Removed a total of 0 cells.

9.15.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fll_wrapper_2..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

9.15.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fll_wrapper_2.
Performed a total of 0 changes.

9.15.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fll_wrapper_2'.
Removed a total of 0 cells.

9.15.6. Executing OPT_DFF pass (perform DFF optimizations).

9.15.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fll_wrapper_2..
Removed 0 unused cells and 7 unused wires.
<suppressed ~1 debug messages>

9.15.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module fll_wrapper_2.

9.15.9. Rerunning OPT passes. (Maybe there is more to do..)

9.15.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fll_wrapper_2..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

9.15.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fll_wrapper_2.
Performed a total of 0 changes.

9.15.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fll_wrapper_2'.
Removed a total of 0 cells.

9.15.13. Executing OPT_DFF pass (perform DFF optimizations).

9.15.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fll_wrapper_2..

9.15.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module fll_wrapper_2.

9.15.16. Finished OPT passes. (There is nothing left to do.)

9.16. Executing MEMORY pass.

9.16.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

9.16.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

9.16.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

9.16.4. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

9.16.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fll_wrapper_2..

9.16.6. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

9.16.7. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

9.16.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fll_wrapper_2..

9.16.9. Executing MEMORY_COLLECT pass (generating $mem cells).

9.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fll_wrapper_2..

9.18. Executing OPT pass (performing simple optimizations).

9.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module fll_wrapper_2.
<suppressed ~4 debug messages>

9.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fll_wrapper_2'.
Removed a total of 0 cells.

9.18.3. Executing OPT_DFF pass (perform DFF optimizations).

9.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fll_wrapper_2..
Removed 10 unused cells and 12 unused wires.
<suppressed ~11 debug messages>

9.18.5. Finished fast OPT passes.

9.19. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

9.20. Executing OPT pass (performing simple optimizations).

9.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module fll_wrapper_2.

9.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fll_wrapper_2'.
Removed a total of 0 cells.

9.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fll_wrapper_2..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

9.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fll_wrapper_2.
    Consolidated identical input bits for $mux cell $flatten\fll_core.$procmux$86:
      Old ports: A=3'100, B=3'001, Y=$flatten\fll_core.$3\corner_tmp[2:0]
      New ports: A=2'10, B=2'01, Y={ $flatten\fll_core.$3\corner_tmp[2:0] [2] $flatten\fll_core.$3\corner_tmp[2:0] [0] }
      New connections: $flatten\fll_core.$3\corner_tmp[2:0] [1] = 1'0
  Optimizing cells in module \fll_wrapper_2.
Performed a total of 1 changes.

9.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fll_wrapper_2'.
Removed a total of 0 cells.

9.20.6. Executing OPT_SHARE pass.
    Found cells that share an operand and can be merged by moving the $mux $flatten\fll_core.$procmux$110 in front of them:
        $auto$alumacc.cc:485:replace_alu$218
        $auto$alumacc.cc:485:replace_alu$224

9.20.7. Executing OPT_DFF pass (perform DFF optimizations).

9.20.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fll_wrapper_2..
Removed 0 unused cells and 6 unused wires.
<suppressed ~1 debug messages>

9.20.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module fll_wrapper_2.
<suppressed ~2 debug messages>

9.20.10. Rerunning OPT passes. (Maybe there is more to do..)

9.20.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fll_wrapper_2..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

9.20.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fll_wrapper_2.
    Consolidated identical input bits for $mux cell $auto$opt_share.cc:241:merge_operators$259:
      Old ports: A=10'1111111111, B=10'0000000001, Y=$auto$rtlil.cc:2443:Mux$260
      New ports: A=1'1, B=1'0, Y=$auto$rtlil.cc:2443:Mux$260 [1]
      New connections: { $auto$rtlil.cc:2443:Mux$260 [9:2] $auto$rtlil.cc:2443:Mux$260 [0] } = { $auto$rtlil.cc:2443:Mux$260 [1] $auto$rtlil.cc:2443:Mux$260 [1] $auto$rtlil.cc:2443:Mux$260 [1] $auto$rtlil.cc:2443:Mux$260 [1] $auto$rtlil.cc:2443:Mux$260 [1] $auto$rtlil.cc:2443:Mux$260 [1] $auto$rtlil.cc:2443:Mux$260 [1] $auto$rtlil.cc:2443:Mux$260 [1] 1'1 }
  Optimizing cells in module \fll_wrapper_2.
Performed a total of 1 changes.

9.20.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fll_wrapper_2'.
Removed a total of 0 cells.

9.20.14. Executing OPT_SHARE pass.

9.20.15. Executing OPT_DFF pass (perform DFF optimizations).

9.20.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fll_wrapper_2..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

9.20.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module fll_wrapper_2.
<suppressed ~1 debug messages>

9.20.18. Rerunning OPT passes. (Maybe there is more to do..)

9.20.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fll_wrapper_2..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

9.20.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fll_wrapper_2.
Performed a total of 0 changes.

9.20.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fll_wrapper_2'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

9.20.22. Executing OPT_SHARE pass.

9.20.23. Executing OPT_DFF pass (perform DFF optimizations).

9.20.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fll_wrapper_2..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

9.20.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module fll_wrapper_2.

9.20.26. Rerunning OPT passes. (Maybe there is more to do..)

9.20.27. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fll_wrapper_2..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

9.20.28. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fll_wrapper_2.
Performed a total of 0 changes.

9.20.29. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fll_wrapper_2'.
Removed a total of 0 cells.

9.20.30. Executing OPT_SHARE pass.

9.20.31. Executing OPT_DFF pass (perform DFF optimizations).

9.20.32. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fll_wrapper_2..

9.20.33. Executing OPT_EXPR pass (perform const folding).
Optimizing module fll_wrapper_2.

9.20.34. Finished OPT passes. (There is nothing left to do.)

9.21. Executing TECHMAP pass (map to technology primitives).

9.21.1. Executing Verilog-2005 frontend: /foss/tools/yosys/cfe940a/bin/../share/yosys/techmap.v
Parsing Verilog input from `/foss/tools/yosys/cfe940a/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

9.21.2. Continuing TECHMAP pass.
Using template $paramod$484d51534650924b7ed4c69e46eed3a56904771f\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $dffe.
Using extmapper simplemap for cells of type $adff.
Using extmapper simplemap for cells of type $adffe.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $logic_and.
Using template $paramod$1e8c376286295ea5767a0416bc3548f868074797\_90_alu for cells of type $alu.
Using template $paramod$6a42b6fefed750f8a1c58eab59479d960557103c\_90_alu for cells of type $alu.
Using template $paramod$1bb7aebaa32f16dab78ad6c76561e8e43e165fdb\_90_alu for cells of type $alu.
Using template $paramod$754650b284649a026620fc6856e5b6886cbfe794\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $eq.
Using template $paramod$956697fce63908d39d1e4745683af5cf1a798cee\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001010 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001011 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000100000 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010110 for cells of type $lcu.
No more expansions possible.
<suppressed ~1347 debug messages>

9.22. Executing OPT pass (performing simple optimizations).

9.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module fll_wrapper_2.
<suppressed ~809 debug messages>

9.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fll_wrapper_2'.
<suppressed ~249 debug messages>
Removed a total of 83 cells.

9.22.3. Executing OPT_DFF pass (perform DFF optimizations).

9.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fll_wrapper_2..
Removed 123 unused cells and 636 unused wires.
<suppressed ~124 debug messages>

9.22.5. Finished fast OPT passes.

9.23. Executing ABC pass (technology mapping using ABC).

9.23.1. Extracting gate netlist of module `\fll_wrapper_2' to `<abc-temp-dir>/input.blif'..
Extracted 439 gates and 520 wires to a netlist network with 81 inputs and 48 outputs.

9.23.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

9.23.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       20
ABC RESULTS:            ANDNOT cells:      132
ABC RESULTS:               MUX cells:        1
ABC RESULTS:              NAND cells:       22
ABC RESULTS:               NOR cells:       21
ABC RESULTS:               NOT cells:       10
ABC RESULTS:                OR cells:       40
ABC RESULTS:             ORNOT cells:       30
ABC RESULTS:              XNOR cells:       19
ABC RESULTS:               XOR cells:       81
ABC RESULTS:        internal signals:      391
ABC RESULTS:           input signals:       81
ABC RESULTS:          output signals:       48
Removing temp directory.

9.24. Executing OPT pass (performing simple optimizations).

9.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module fll_wrapper_2.

9.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fll_wrapper_2'.
<suppressed ~12 debug messages>
Removed a total of 4 cells.

9.24.3. Executing OPT_DFF pass (perform DFF optimizations).

9.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fll_wrapper_2..
Removed 0 unused cells and 313 unused wires.
<suppressed ~1 debug messages>

9.24.5. Finished fast OPT passes.

9.25. Executing HIERARCHY pass (managing design hierarchy).

9.25.1. Analyzing design hierarchy..
Top module:  \fll_wrapper_2

9.25.2. Analyzing design hierarchy..
Top module:  \fll_wrapper_2
Removed 0 unused modules.

9.26. Printing statistics.

=== fll_wrapper_2 ===

   Number of wires:                384
   Number of wire bits:            691
   Number of public wires:          45
   Number of public wire bits:     240
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                428
     $_ANDNOT_                     132
     $_AND_                         20
     $_DFFE_PP0P_                   10
     $_DFFE_PP1P_                    1
     $_DFFE_PP_                      3
     $_DFF_PP0_                     41
     $_DFF_PP1_                      1
     $_MUX_                          1
     $_NAND_                        22
     $_NOR_                         17
     $_NOT_                         10
     $_ORNOT_                       30
     $_OR_                          40
     $_XNOR_                        19
     $_XOR_                         81

9.27. Executing CHECK pass (checking for obvious problems).
Checking module fll_wrapper_2...
Found and reported 0 problems.

10. Generating Graphviz representation of design.
Writing dot description to `/foss/designs/ma2022/fll_2/runs/RUN_2022.10.07_08.59.13/tmp/synthesis/post_techmap.dot'.
Dumping module fll_wrapper_2 to page 1.

11. Executing SHARE pass (SAT-based resource sharing).

12. Executing OPT pass (performing simple optimizations).

12.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module fll_wrapper_2.

12.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fll_wrapper_2'.
Removed a total of 0 cells.

12.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fll_wrapper_2..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

12.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fll_wrapper_2.
Performed a total of 0 changes.

12.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fll_wrapper_2'.
Removed a total of 0 cells.

12.6. Executing OPT_DFF pass (perform DFF optimizations).

12.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fll_wrapper_2..

12.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module fll_wrapper_2.

12.9. Finished OPT passes. (There is nothing left to do.)

13. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fll_wrapper_2..
Removed 0 unused cells and 29 unused wires.
<suppressed ~29 debug messages>

14. Printing statistics.

=== fll_wrapper_2 ===

   Number of wires:                355
   Number of wire bits:            541
   Number of public wires:          16
   Number of public wire bits:      90
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                428
     $_ANDNOT_                     132
     $_AND_                         20
     $_DFFE_PP0P_                   10
     $_DFFE_PP1P_                    1
     $_DFFE_PP_                      3
     $_DFF_PP0_                     41
     $_DFF_PP1_                      1
     $_MUX_                          1
     $_NAND_                        22
     $_NOR_                         17
     $_NOT_                         10
     $_ORNOT_                       30
     $_OR_                          40
     $_XNOR_                        19
     $_XOR_                         81

mapping tbuf

15. Executing TECHMAP pass (map to technology primitives).

15.1. Executing Verilog-2005 frontend: /foss/pdk/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v
Parsing Verilog input from `/foss/pdk/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v' to AST representation.
Generating RTLIL representation for module `\$_TBUF_'.
Successfully finished Verilog frontend.

15.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

16. Executing SIMPLEMAP pass (map simple cells to gate primitives).

17. Executing TECHMAP pass (map to technology primitives).

17.1. Executing Verilog-2005 frontend: /foss/pdk/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/foss/pdk/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

17.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

18. Executing SIMPLEMAP pass (map simple cells to gate primitives).

19. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

19.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\fll_wrapper_2':
  mapped 51 $_DFF_PN0_ cells to \sky130_fd_sc_hd__dfrtp_2 cells.
  mapped 2 $_DFF_PN1_ cells to \sky130_fd_sc_hd__dfstp_2 cells.
  mapped 3 $_DFF_P_ cells to \sky130_fd_sc_hd__dfxtp_2 cells.

20. Printing statistics.

=== fll_wrapper_2 ===

   Number of wires:                422
   Number of wire bits:            608
   Number of public wires:          16
   Number of public wire bits:      90
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                495
     $_ANDNOT_                     132
     $_AND_                         20
     $_MUX_                         15
     $_NAND_                        22
     $_NOR_                         17
     $_NOT_                         63
     $_ORNOT_                       30
     $_OR_                          40
     $_XNOR_                        19
     $_XOR_                         81
     sky130_fd_sc_hd__dfrtp_2       51
     sky130_fd_sc_hd__dfstp_2        2
     sky130_fd_sc_hd__dfxtp_2        3

[INFO]: USING STRATEGY AREA 0

21. Executing ABC pass (technology mapping using ABC).

21.1. Extracting gate netlist of module `\fll_wrapper_2' to `/tmp/yosys-abc-Phf19g/input.blif'..
Extracted 439 gates and 526 wires to a netlist network with 86 inputs and 99 outputs.

21.1.1. Executing ABC.
Running ABC command: /foss/tools/yosys/cfe940a/bin/yosys-abc -s -f /tmp/yosys-abc-Phf19g/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-Phf19g/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-Phf19g/input.blif 
ABC: + read_lib -w /foss/designs/ma2022/fll_2/runs/RUN_2022.10.07_08.59.13/tmp/synthesis/trimmed.lib 
ABC: Parsing finished successfully.  Parsing time =     0.08 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Library "sky130A_merged" from "/foss/designs/ma2022/fll_2/runs/RUN_2022.10.07_08.59.13/tmp/synthesis/trimmed.lib" has 175 cells (17 skipped: 14 seq; 3 tri-state; 0 no func; 0 dont_use).  Time =     0.13 sec
ABC: Memory =    7.77 MB. Time =     0.13 sec
ABC: Warning: Detected 2 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /foss/designs/ma2022/fll_2/runs/RUN_2022.10.07_08.59.13/tmp/synthesis/synthesis.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_2".
ABC: Setting output load to be 33.442001.
ABC: + read_constr /foss/designs/ma2022/fll_2/runs/RUN_2022.10.07_08.59.13/tmp/synthesis/synthesis.sdc 
ABC: + fx 
ABC: + mfs 
ABC: + strash 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + retime -D -D 40000 -M 5 
ABC: + scleanup 
ABC: Error: The network is combinational.
ABC: + fraig_store 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + fraig_restore 
ABC: + amap -m -Q 0.1 -F 20 -A 20 -C 5000 
ABC: + retime -D -D 40000 
ABC: + &get -n 
ABC: + &st 
ABC: + &dch 
ABC: + &nf 
ABC: + &put 
ABC: + buffer -N 5 -S 750.0 
ABC: + upsize -D 40000 
ABC: Current delay (3406.33 ps) does not exceed the target delay (40000.00 ps). Upsizing is not performed.
ABC: + dnsize -D 40000 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =    295 ( 39.7 %)   Cap = 14.3 ff (  6.4 %)   Area =     2205.87 ( 60.3 %)   Delay =  3358.39 ps  ( 21.0 %)               
ABC: Path  0 --      25 : 0    3 pi                        A =   0.00  Df =  36.5  -20.3 ps  S =  56.2 ps  Cin =  0.0 ff  Cout =  10.8 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --     213 : 1    5 sky130_fd_sc_hd__inv_2    A =   3.75  Df =  99.8   -7.0 ps  S =  93.0 ps  Cin =  4.5 ff  Cout =  19.0 ff  Cmax = 331.4 ff  G =  404  
ABC: Path  2 --     233 : 4    2 sky130_fd_sc_hd__a22o_2   A =  10.01  Df = 314.5  -75.1 ps  S =  42.8 ps  Cin =  2.3 ff  Cout =   4.0 ff  Cmax = 301.2 ff  G =  163  
ABC: Path  3 --     238 : 4    1 sky130_fd_sc_hd__or4bb_2  A =  12.51  Df = 921.8 -313.9 ps  S =  86.8 ps  Cin =  1.5 ff  Cout =   1.8 ff  Cmax = 312.2 ff  G =  115  
ABC: Path  4 --     243 : 4    1 sky130_fd_sc_hd__o2bb2a_2 A =  11.26  Df =1185.3 -426.9 ps  S =  42.1 ps  Cin =  1.8 ff  Cout =   2.5 ff  Cmax = 294.8 ff  G =  134  
ABC: Path  5 --     247 : 4    3 sky130_fd_sc_hd__o31a_2   A =  10.01  Df =1508.5 -615.0 ps  S =  57.2 ps  Cin =  2.3 ff  Cout =   5.2 ff  Cmax = 285.7 ff  G =  212  
ABC: Path  6 --     248 : 1    5 sky130_fd_sc_hd__buf_1    A =   3.75  Df =1681.0 -545.7 ps  S = 276.0 ps  Cin =  2.1 ff  Cout =  22.9 ff  Cmax = 130.0 ff  G = 1046  
ABC: Path  7 --     255 : 1    5 sky130_fd_sc_hd__buf_1    A =   3.75  Df =1897.7 -443.6 ps  S = 325.7 ps  Cin =  2.1 ff  Cout =  27.3 ff  Cmax = 130.0 ff  G = 1231  
ABC: Path  8 --     256 : 2    2 sky130_fd_sc_hd__nor2_2   A =   6.26  Df =2039.0 -514.7 ps  S = 112.4 ps  Cin =  4.4 ff  Cout =   7.2 ff  Cmax = 141.9 ff  G =  153  
ABC: Path  9 --     264 : 5    4 sky130_fd_sc_hd__o311a_2  A =  11.26  Df =2240.5 -307.2 ps  S =  65.8 ps  Cin =  2.4 ff  Cout =   6.7 ff  Cmax = 293.9 ff  G =  275  
ABC: Path 10 --     276 : 4    2 sky130_fd_sc_hd__a2bb2o_2 A =  11.26  Df =2545.4  -66.1 ps  S =  87.0 ps  Cin =  1.7 ff  Cout =  13.5 ff  Cmax = 300.3 ff  G =  754  
ABC: Path 11 --     278 : 3    1 sky130_fd_sc_hd__a21oi_2  A =   8.76  Df =2726.2 -173.1 ps  S = 146.9 ps  Cin =  4.6 ff  Cout =   9.0 ff  Cmax = 128.2 ff  G =  190  
ABC: Path 12 --     281 : 2    1 sky130_fd_sc_hd__xnor2_2  A =  16.27  Df =2888.7 -209.4 ps  S =  88.8 ps  Cin =  8.5 ff  Cout =   1.8 ff  Cmax = 121.8 ff  G =   20  
ABC: Path 13 --     290 : 3    1 sky130_fd_sc_hd__mux2_2   A =  11.26  Df =3139.5 -196.8 ps  S =  45.5 ps  Cin =  2.3 ff  Cout =   2.2 ff  Cmax = 297.6 ff  G =   92  
ABC: Path 14 --     291 : 1    1 sky130_fd_sc_hd__buf_1    A =   3.75  Df =3358.4  -95.7 ps  S = 396.3 ps  Cin =  2.1 ff  Cout =  33.4 ff  Cmax = 130.0 ff  G = 1590  
ABC: Start-point = pi24 (\fll_core.counter1.count [4]).  End-point = po1 ($auto$rtlil.cc:2515:MuxGate$2815).
ABC: + print_stats -m 
ABC: netlist                       : i/o =   86/   99  lat =    0  nd =   295  edge =    635  area =2205.79  delay =15.00  lev = 15
ABC: + write_blif /tmp/yosys-abc-Phf19g/output.blif 

21.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__a211o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a21o_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__a21oi_2 cells:       14
ABC RESULTS:   sky130_fd_sc_hd__a221o_2 cells:        7
ABC RESULTS:   sky130_fd_sc_hd__a221oi_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a22o_2 cells:        8
ABC RESULTS:   sky130_fd_sc_hd__a2bb2o_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__and2_2 cells:       11
ABC RESULTS:   sky130_fd_sc_hd__and2b_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__and3_2 cells:        9
ABC RESULTS:   sky130_fd_sc_hd__and3b_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__and4_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__buf_1 cells:       33
ABC RESULTS:   sky130_fd_sc_hd__inv_2 cells:       84
ABC RESULTS:   sky130_fd_sc_hd__mux2_2 cells:       13
ABC RESULTS:   sky130_fd_sc_hd__nand2_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__nand3b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nor2_2 cells:       28
ABC RESULTS:   sky130_fd_sc_hd__nor4_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o2111a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o211a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o21a_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__o21ai_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o21ba_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o221a_2 cells:       11
ABC RESULTS:   sky130_fd_sc_hd__o22a_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__o2bb2a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o311a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o31a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or2_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__or2b_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__or3_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or4b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or4bb_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__xnor2_2 cells:       12
ABC RESULTS:   sky130_fd_sc_hd__xor2_2 cells:       14
ABC RESULTS:        internal signals:      341
ABC RESULTS:           input signals:       86
ABC RESULTS:          output signals:       99
Removing temp directory.

22. Executing SETUNDEF pass (replace undef values with defined constants).

23. Executing HILOMAP pass (mapping to constant drivers).

24. Executing SPLITNETS pass (splitting up multi-bit signals).

25. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fll_wrapper_2..
Removed 1 unused cells and 606 unused wires.
<suppressed ~2 debug messages>

26. Executing INSBUF pass (insert buffer cells for connected wires).

27. Executing CHECK pass (checking for obvious problems).
Checking module fll_wrapper_2...
Warning: Wire fll_wrapper_2.\pwm is used but has no driver.
Warning: Wire fll_wrapper_2.\lock is used but has no driver.
Warning: Wire fll_wrapper_2.\corner [2] is used but has no driver.
Warning: Wire fll_wrapper_2.\corner [1] is used but has no driver.
Warning: Wire fll_wrapper_2.\corner [0] is used but has no driver.
Found and reported 5 problems.

28. Printing statistics.

=== fll_wrapper_2 ===

   Number of wires:                355
   Number of wire bits:            384
   Number of public wires:          61
   Number of public wire bits:      90
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                351
     sky130_fd_sc_hd__a211o_2        1
     sky130_fd_sc_hd__a21o_2         3
     sky130_fd_sc_hd__a21oi_2       14
     sky130_fd_sc_hd__a221o_2        7
     sky130_fd_sc_hd__a221oi_2       1
     sky130_fd_sc_hd__a22o_2         8
     sky130_fd_sc_hd__a2bb2o_2       2
     sky130_fd_sc_hd__and2_2        11
     sky130_fd_sc_hd__and2b_2        4
     sky130_fd_sc_hd__and3_2         9
     sky130_fd_sc_hd__and3b_2        2
     sky130_fd_sc_hd__and4_2         3
     sky130_fd_sc_hd__buf_1         33
     sky130_fd_sc_hd__dfrtp_2       51
     sky130_fd_sc_hd__dfstp_2        2
     sky130_fd_sc_hd__dfxtp_2        3
     sky130_fd_sc_hd__inv_2         84
     sky130_fd_sc_hd__mux2_2        13
     sky130_fd_sc_hd__nand2_2        6
     sky130_fd_sc_hd__nand3b_2       1
     sky130_fd_sc_hd__nor2_2        28
     sky130_fd_sc_hd__nor4_2         1
     sky130_fd_sc_hd__o2111a_2       1
     sky130_fd_sc_hd__o211a_2        1
     sky130_fd_sc_hd__o21a_2         3
     sky130_fd_sc_hd__o21ai_2        2
     sky130_fd_sc_hd__o21ba_2        1
     sky130_fd_sc_hd__o221a_2       11
     sky130_fd_sc_hd__o22a_2         5
     sky130_fd_sc_hd__o2bb2a_2       1
     sky130_fd_sc_hd__o311a_2        1
     sky130_fd_sc_hd__o31a_2         1
     sky130_fd_sc_hd__or2_2          5
     sky130_fd_sc_hd__or2b_2         3
     sky130_fd_sc_hd__or3_2          1
     sky130_fd_sc_hd__or4b_2         1
     sky130_fd_sc_hd__or4bb_2        1
     sky130_fd_sc_hd__xnor2_2       12
     sky130_fd_sc_hd__xor2_2        14

   Chip area for module '\fll_wrapper_2': 3662.262400

29. Executing Verilog backend.
Dumping module `\fll_wrapper_2'.

Warnings: 5 unique messages, 5 total
End of script. Logfile hash: 35e4b8b58b, CPU: user 2.13s system 0.03s, MEM: 42.00 MB peak
Yosys 0.12+45 (git sha1 cfe940a98, gcc 9.2.1 -fPIC -Os)
Time spent: 32% 2x abc (1 sec), 21% 4x stat (0 sec), ...
